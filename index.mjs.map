{"version":3,"file":"index.mjs","sources":["../lib/nd_accessors.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/0d_accessors.js","../lib/1d_accessors.js","../lib/2d_accessors.js","../lib/3d_accessors.js","../lib/4d_accessors.js","../lib/5d_accessors.js","../lib/6d_accessors.js","../lib/7d_accessors.js","../lib/8d_accessors.js","../lib/9d_accessors.js","../lib/10d_accessors.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/2d_blocked_accessors.js","../lib/3d_blocked_accessors.js","../lib/4d_blocked_accessors.js","../lib/5d_blocked_accessors.js","../lib/6d_blocked_accessors.js","../lib/7d_blocked_accessors.js","../lib/8d_blocked_accessors.js","../lib/9d_blocked_accessors.js","../lib/10d_blocked_accessors.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in n-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binarynd( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binarynd( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( sh, sz, oz, ordz, i, MODE );\n\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in n-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binarynd( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binarynd( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( sh, sz, oz, ordz, i, MODE );\n\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport anyIsEntryIn from '@stdlib/array-base-any-is-entry-in';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport blockedaccessorbinary2d from './2d_blocked_accessors.js';\nimport blockedaccessorbinary3d from './3d_blocked_accessors.js';\nimport blockedaccessorbinary4d from './4d_blocked_accessors.js';\nimport blockedaccessorbinary5d from './5d_blocked_accessors.js';\nimport blockedaccessorbinary6d from './6d_blocked_accessors.js';\nimport blockedaccessorbinary7d from './7d_blocked_accessors.js';\nimport blockedaccessorbinary8d from './8d_blocked_accessors.js';\nimport blockedaccessorbinary9d from './9d_blocked_accessors.js';\nimport blockedaccessorbinary10d from './10d_blocked_accessors.js';\nimport blockedbinary2d from './2d_blocked.js';\nimport blockedbinary3d from './3d_blocked.js';\nimport blockedbinary4d from './4d_blocked.js';\nimport blockedbinary5d from './5d_blocked.js';\nimport blockedbinary6d from './6d_blocked.js';\nimport blockedbinary7d from './7d_blocked.js';\nimport blockedbinary8d from './8d_blocked.js';\nimport blockedbinary9d from './9d_blocked.js';\nimport blockedbinary10d from './10d_blocked.js';\nimport accessorbinary0d from './0d_accessors.js';\nimport accessorbinary1d from './1d_accessors.js';\nimport accessorbinary2d from './2d_accessors.js';\nimport accessorbinary3d from './3d_accessors.js';\nimport accessorbinary4d from './4d_accessors.js';\nimport accessorbinary5d from './5d_accessors.js';\nimport accessorbinary6d from './6d_accessors.js';\nimport accessorbinary7d from './7d_accessors.js';\nimport accessorbinary8d from './8d_accessors.js';\nimport accessorbinary9d from './9d_accessors.js';\nimport accessorbinary10d from './10d_accessors.js';\nimport accessorbinarynd from './nd_accessors.js';\nimport binary0d from './0d.js';\nimport binary1d from './1d.js';\nimport binary2d from './2d.js';\nimport binary3d from './3d.js';\nimport binary4d from './4d.js';\nimport binary5d from './5d.js';\nimport binary6d from './6d.js';\nimport binary7d from './7d.js';\nimport binary8d from './8d.js';\nimport binary9d from './9d.js';\nimport binary10d from './10d.js';\nimport binarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar BINARY = [\n\tbinary0d,\n\tbinary1d,\n\tbinary2d,\n\tbinary3d,\n\tbinary4d,\n\tbinary5d,\n\tbinary6d,\n\tbinary7d,\n\tbinary8d,\n\tbinary9d,\n\tbinary10d\n];\nvar ACCESSOR_BINARY = [\n\taccessorbinary0d,\n\taccessorbinary1d,\n\taccessorbinary2d,\n\taccessorbinary3d,\n\taccessorbinary4d,\n\taccessorbinary5d,\n\taccessorbinary6d,\n\taccessorbinary7d,\n\taccessorbinary8d,\n\taccessorbinary9d,\n\taccessorbinary10d\n];\nvar BLOCKED_BINARY = [\n\tblockedbinary2d, // 0\n\tblockedbinary3d,\n\tblockedbinary4d,\n\tblockedbinary5d,\n\tblockedbinary6d,\n\tblockedbinary7d,\n\tblockedbinary8d,\n\tblockedbinary9d,\n\tblockedbinary10d // 8\n];\nvar BLOCKED_ACCESSOR_BINARY = [\n\tblockedaccessorbinary2d, // 0\n\tblockedaccessorbinary3d,\n\tblockedaccessorbinary4d,\n\tblockedaccessorbinary5d,\n\tblockedaccessorbinary6d,\n\tblockedaccessorbinary7d,\n\tblockedaccessorbinary8d,\n\tblockedaccessorbinary9d,\n\tblockedaccessorbinary10d // 8\n];\nvar MAX_DIMS = BINARY.length - 1;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if at least one ndarray data buffer implements the accessor protocol.\n*\n* @private\n* @param {ndarrayLike} x - first ndarray\n* @param {ndarrayLike} y - second ndarray\n* @param {ndarrayLike} z - third ndarray\n* @returns {boolean} boolean indicating whether an ndarray data buffer implements the accessor protocol\n*/\nfunction hasAccessors( x, y, z ) {\n\treturn anyIsEntryIn( [ x, y, z ], 'accessorProtocol', true );\n}\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in input ndarrays and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an object with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing two input arrays and one output array\n* @param {Callback} fcn - binary callback\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import getData from '@stdlib/ndarray-data-buffer';\n*\n* function add( a, b ) {\n*     return a + b;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zbuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n* var sz = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarrays:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n* var y = new ndarray( 'float64', ybuf, shape, sy, oy, 'row-major' );\n* var z = new ndarray( 'float64', zbuf, shape, sz, oz, 'row-major' );\n*\n* // Apply the binary function:\n* binary( [ x, y, z ], add );\n*\n* console.log( getData( z ) );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction binary( arrays, fcn ) { // eslint-disable-line max-statements\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar zmmv;\n\tvar shx;\n\tvar shy;\n\tvar shz;\n\tvar iox;\n\tvar ioy;\n\tvar ioz;\n\tvar len;\n\tvar ord;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\tz = ndarray2object( arrays[ 2 ] );\n\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tshz = z.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length || ndims !== shz.length ) {\n\t\tthrow new Error( format( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == %d. ndims(y) == %d. ndims(z) == %d.', ndims, shy.length, shz.length ) );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ ndims ]( x, y, z, fcn );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] || d !== shz[ i ] ) {\n\t\t\tthrow new Error( format('null0d') );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ ndims ]( x, y, z, fcn );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Determine whether the ndarrays have only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tz.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tz.strides = [ sz[i] ];\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ 1 ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ 1 ]( x, y, z, fcn );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\tioz = iterationOrder( sz ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sx );\n\tif ( iox !== 0 && ioy !== 0 && ioz !== 0 && ord === strides2order( sy ) && ord === strides2order( sz ) ) { // eslint-disable-line max-len\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\t\tzmmv = minmaxViewBufferIndex( shz, sz, z.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif (\n\t\t\tlen === ( xmmv[1]-xmmv[0]+1 ) &&\n\t\t\tlen === ( ymmv[1]-ymmv[0]+1 ) &&\n\t\t\tlen === ( zmmv[1]-zmmv[0]+1 )\n\t\t) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioz === 1 ) {\n\t\t\t\toz = zmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toz = zmmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tz.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tz.strides = [ ioz ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tz.offset = oz;\n\t\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\t\treturn ACCESSOR_BINARY[ 1 ]( x, y, z, fcn );\n\t\t\t}\n\t\t\treturn BINARY[ 1 ]( x, y, z, fcn );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, ord === 1, fcn );\n\t\t\t}\n\t\t\treturn BINARY[ ndims ]( x, y, z, ord === 1, fcn );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn BLOCKED_ACCESSOR_BINARY[ ndims-2 ]( x, y, z, fcn );\n\t\t}\n\t\treturn BLOCKED_BINARY[ ndims-2 ]( x, y, z, fcn );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( hasAccessors( x, y, z ) ) {\n\t\treturn accessorbinarynd( x, y, z, fcn );\n\t}\n\tbinarynd( x, y, z, fcn );\n}\n\n\n// EXPORTS //\n\nexport default binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in zero-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0 ] );\n* var ybuf = new Float64Array( [ 2.0 ] );\n* var zbuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n* var sz = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary0d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 3.0 ]\n*/\nfunction binary0d( x, y, z, fcn ) {\n\tz.data[ z.offset ] = fcn( x.data[ x.offset ], y.data[ y.offset ] );\n}\n\n\n// EXPORTS //\n\nexport default binary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in one-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 12 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n* var sz = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary1d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary1d( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dy0;\n\tvar dz0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\tdz0 = z.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\tiz += dz0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary2d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary2d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t\tdz0 = sz[ 1 ];\n\t\tdz1 = sz[ 0 ] - ( S0*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\tiz += dz0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t\tiz += dz1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary3d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary3d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 2 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[2] );\n\t\tdz2 = sz[ 0 ] - ( S1*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\tiz += dz0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t\tiz += dz1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t\tiz += dz2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary4d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary4d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t\tdz0 = sz[ 3 ];\n\t\tdz1 = sz[ 2 ] - ( S0*sz[3] );\n\t\tdz2 = sz[ 1 ] - ( S1*sz[2] );\n\t\tdz3 = sz[ 0 ] - ( S2*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t\tiz += dz2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t\tiz += dz3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary5d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary5d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t\tdz0 = sz[ 4 ];\n\t\tdz1 = sz[ 3 ] - ( S0*sz[4] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[3] );\n\t\tdz3 = sz[ 1 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 0 ] - ( S3*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t\tiz += dz1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t\tiz += dz2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t\tiz += dz3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t\tiz += dz4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary6d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary6d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t\tdz0 = sz[ 5 ];\n\t\tdz1 = sz[ 4 ] - ( S0*sz[5] );\n\t\tdz2 = sz[ 3 ] - ( S1*sz[4] );\n\t\tdz3 = sz[ 2 ] - ( S2*sz[3] );\n\t\tdz4 = sz[ 1 ] - ( S3*sz[2] );\n\t\tdz5 = sz[ 0 ] - ( S4*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t\tiz += dz3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t\tiz += dz4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t\tiz += dz5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary7d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary7d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t\tdz0 = sz[ 6 ];\n\t\tdz1 = sz[ 5 ] - ( S0*sz[6] );\n\t\tdz2 = sz[ 4 ] - ( S1*sz[5] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[4] );\n\t\tdz4 = sz[ 2 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 1 ] - ( S4*sz[2] );\n\t\tdz6 = sz[ 0 ] - ( S5*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t\tiz += dz3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t\tiz += dz4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t\tiz += dz5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t\tiz += dz6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary8d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary8d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t\tdz0 = sz[ 7 ];\n\t\tdz1 = sz[ 6 ] - ( S0*sz[7] );\n\t\tdz2 = sz[ 5 ] - ( S1*sz[6] );\n\t\tdz3 = sz[ 4 ] - ( S2*sz[5] );\n\t\tdz4 = sz[ 3 ] - ( S3*sz[4] );\n\t\tdz5 = sz[ 2 ] - ( S4*sz[3] );\n\t\tdz6 = sz[ 1 ] - ( S5*sz[2] );\n\t\tdz7 = sz[ 0 ] - ( S6*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t\tiz += dz4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t\tiz += dz5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t\tiz += dz6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t\tiz += dz7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary9d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary9d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t\tdz0 = sz[ 8 ];\n\t\tdz1 = sz[ 7 ] - ( S0*sz[8] );\n\t\tdz2 = sz[ 6 ] - ( S1*sz[7] );\n\t\tdz3 = sz[ 5 ] - ( S2*sz[6] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[5] );\n\t\tdz5 = sz[ 3 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 2 ] - ( S5*sz[3] );\n\t\tdz7 = sz[ 1 ] - ( S6*sz[2] );\n\t\tdz8 = sz[ 0 ] - ( S7*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t\tiz += dz5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t\tiz += dz6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t\tiz += dz7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t\tiz += dz8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len, max-lines-per-function */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary10d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary10d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t\tdz0 = sz[ 9 ];\n\t\tdz1 = sz[ 8 ] - ( S0*sz[9] );\n\t\tdz2 = sz[ 7 ] - ( S1*sz[8] );\n\t\tdz3 = sz[ 6 ] - ( S2*sz[7] );\n\t\tdz4 = sz[ 5 ] - ( S3*sz[6] );\n\t\tdz5 = sz[ 4 ] - ( S4*sz[5] );\n\t\tdz6 = sz[ 3 ] - ( S5*sz[4] );\n\t\tdz7 = sz[ 2 ] - ( S6*sz[3] );\n\t\tdz8 = sz[ 1 ] - ( S7*sz[2] );\n\t\tdz9 = sz[ 0 ] - ( S8*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t\tdz9 = sz[ 9 ] - ( S8*sz[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t\tiz += dz6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t\tiz += dz7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t\tiz += dz8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t\tiz += dz9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in zero-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0 ] );\n* var ybuf = toAccessorArray( [ 2.0 ] );\n* var zbuf = toAccessorArray( [ 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n* var sz = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary0d( x, y, z, fcn );\n*\n* var v = z.data.get( 0 );\n* // returns 3.0\n*/\nfunction binary0d( x, y, z, fcn ) {\n\tz.accessors[ 1 ]( z.data, z.offset, fcn( x.accessors[ 0 ]( x.data, x.offset ), y.accessors[ 0 ]( y.data, y.offset ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default binary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in one-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 12 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n* var sz = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary1d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary1d( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dy0;\n\tvar dz0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\tdz0 = z.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\tiz += dz0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary2d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary2d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t\tdz0 = sz[ 1 ];\n\t\tdz1 = sz[ 0 ] - ( S0*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\tiz += dz0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t\tiz += dz1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary3d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary3d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 2 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[2] );\n\t\tdz2 = sz[ 0 ] - ( S1*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\tiz += dz0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t\tiz += dz1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t\tiz += dz2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary4d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary4d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t\tdz0 = sz[ 3 ];\n\t\tdz1 = sz[ 2 ] - ( S0*sz[3] );\n\t\tdz2 = sz[ 1 ] - ( S1*sz[2] );\n\t\tdz3 = sz[ 0 ] - ( S2*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t\tiz += dz2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t\tiz += dz3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary5d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary5d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t\tdz0 = sz[ 4 ];\n\t\tdz1 = sz[ 3 ] - ( S0*sz[4] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[3] );\n\t\tdz3 = sz[ 1 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 0 ] - ( S3*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t\tiz += dz1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t\tiz += dz2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t\tiz += dz3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t\tiz += dz4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary6d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary6d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t\tdz0 = sz[ 5 ];\n\t\tdz1 = sz[ 4 ] - ( S0*sz[5] );\n\t\tdz2 = sz[ 3 ] - ( S1*sz[4] );\n\t\tdz3 = sz[ 2 ] - ( S2*sz[3] );\n\t\tdz4 = sz[ 1 ] - ( S3*sz[2] );\n\t\tdz5 = sz[ 0 ] - ( S4*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t\tiz += dz3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t\tiz += dz4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t\tiz += dz5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary7d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary7d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t\tdz0 = sz[ 6 ];\n\t\tdz1 = sz[ 5 ] - ( S0*sz[6] );\n\t\tdz2 = sz[ 4 ] - ( S1*sz[5] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[4] );\n\t\tdz4 = sz[ 2 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 1 ] - ( S4*sz[2] );\n\t\tdz6 = sz[ 0 ] - ( S5*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t\tiz += dz3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t\tiz += dz4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t\tiz += dz5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t\tiz += dz6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary8d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary8d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t\tdz0 = sz[ 7 ];\n\t\tdz1 = sz[ 6 ] - ( S0*sz[7] );\n\t\tdz2 = sz[ 5 ] - ( S1*sz[6] );\n\t\tdz3 = sz[ 4 ] - ( S2*sz[5] );\n\t\tdz4 = sz[ 3 ] - ( S3*sz[4] );\n\t\tdz5 = sz[ 2 ] - ( S4*sz[3] );\n\t\tdz6 = sz[ 1 ] - ( S5*sz[2] );\n\t\tdz7 = sz[ 0 ] - ( S6*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t\tiz += dz4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t\tiz += dz5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t\tiz += dz6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t\tiz += dz7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary9d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary9d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t\tdz0 = sz[ 8 ];\n\t\tdz1 = sz[ 7 ] - ( S0*sz[8] );\n\t\tdz2 = sz[ 6 ] - ( S1*sz[7] );\n\t\tdz3 = sz[ 5 ] - ( S2*sz[6] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[5] );\n\t\tdz5 = sz[ 3 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 2 ] - ( S5*sz[3] );\n\t\tdz7 = sz[ 1 ] - ( S6*sz[2] );\n\t\tdz8 = sz[ 0 ] - ( S7*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t\tiz += dz5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t\tiz += dz6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t\tiz += dz7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t\tiz += dz8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary10d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary10d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t\tdz0 = sz[ 9 ];\n\t\tdz1 = sz[ 8 ] - ( S0*sz[9] );\n\t\tdz2 = sz[ 7 ] - ( S1*sz[8] );\n\t\tdz3 = sz[ 6 ] - ( S2*sz[7] );\n\t\tdz4 = sz[ 5 ] - ( S3*sz[6] );\n\t\tdz5 = sz[ 4 ] - ( S4*sz[5] );\n\t\tdz6 = sz[ 3 ] - ( S5*sz[4] );\n\t\tdz7 = sz[ 2 ] - ( S6*sz[3] );\n\t\tdz8 = sz[ 1 ] - ( S7*sz[2] );\n\t\tdz9 = sz[ 0 ] - ( S8*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t\tdz9 = sz[ 9 ] - ( S8*sz[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t\tiz += dz6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t\tiz += dz7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t\tiz += dz8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t\tiz += dz9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary2d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary2d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar ox1;\n\tvar oy1;\n\tvar oz1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\toz1 = oz + ( j1*sz[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary3d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary3d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar oz1;\n\tvar oz2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\toz2 = oz + ( j2*sz[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary4d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary4d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\toz3 = oz + ( j3*sz[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary5d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary5d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\toz4 = oz + ( j4*sz[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary6d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary6d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\toz5 = oz + ( j5*sz[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary7d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary7d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\toz6 = oz + ( j6*sz[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary8d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary8d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\toz7 = oz + ( j7*sz[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary9d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary9d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\toz8 = oz + ( j8*sz[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function, max-lines */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary10d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary10d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar oz9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\toz9 = oz + ( j9*sz[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tdz9 = sz[9] - ( s8*sz[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\toz8 = oz9 + ( j8*sz[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary2d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary2d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar ox1;\n\tvar oy1;\n\tvar oz1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\toz1 = oz + ( j1*sz[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary3d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary3d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar oz1;\n\tvar oz2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\toz2 = oz + ( j2*sz[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary4d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary4d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\toz3 = oz + ( j3*sz[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary5d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary5d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\toz4 = oz + ( j4*sz[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary6d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary6d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\toz5 = oz + ( j5*sz[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary7d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary7d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\toz6 = oz + ( j6*sz[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary8d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary8d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\toz7 = oz + ( j7*sz[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary9d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary9d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\toz8 = oz + ( j8*sz[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function, max-lines */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary10d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary10d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar oz9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\toz9 = oz + ( j9*sz[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tdz9 = sz[9] - ( s8*sz[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\toz8 = oz9 + ( j8*sz[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary10d;\n"],"names":["MODE","BINARY","x","y","z","fcn","data","offset","xbuf","ybuf","zbuf","dx0","dy0","dz0","S0","ix","iy","iz","i0","shape","strides","isRowMajor","dx1","dy1","dz1","sh","S1","sx","sy","sz","i1","dx2","dy2","dz2","S2","i2","dx3","dy3","dz3","S3","i3","dx4","dy4","dz4","S4","i4","dx5","dy5","dz5","S5","i5","dx6","dy6","dz6","S6","i6","dx7","dy7","dz7","S7","i7","dx8","dy8","dz8","S8","i8","dx9","dy9","dz9","S9","i9","ACCESSOR_BINARY","accessors","xget","yget","zset","BLOCKED_BINARY","bsize","ox1","oy1","oz1","s0","s1","ox","oy","oz","j0","j1","o","loopOrder","blockSize","dtype","ox2","oy2","oz2","s2","j2","ox3","oy3","oz3","s3","j3","ox4","oy4","oz4","s4","j4","ox5","oy5","oz5","s5","j5","ox6","oy6","oz6","s6","j6","ox7","oy7","oz7","s7","j7","ox8","oy8","oz8","s8","j8","ox9","oy9","oz9","s9","j9","BLOCKED_ACCESSOR_BINARY","MAX_DIMS","length","hasAccessors","anyIsEntryIn","binary","arrays","ndims","xmmv","ymmv","zmmv","shx","shy","shz","iox","ioy","ioz","len","ord","ns","d","i","ndarray2object","Error","format","iterationOrder","strides2order","minmaxViewBufferIndex","ordx","ordy","ordz","numel","order","vind2bind","accessorbinarynd","binarynd"],"mappings":"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qB,CACN,CACDvB,IAAM0B,EACNzB,IAAM0B,EACNzB,IAAM0B,CACN,CACD5B,IAAM+B,EACN9B,IAAM+B,EACN9B,IAAM+B,CACN,CACDjC,IAAMoC,EACNnC,IAAMoC,EACNnC,IAAMoC,CACN,CACDtC,IAAMyC,EACNxC,IAAMyC,EACNxC,IAAMyC,CACN,CASV,ECrRA,SAA0BxD,EAAGC,EAAGC,EAAGC,GAClC,IAAIwE,EACArE,EACAC,EACAC,EACAC,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAjD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAjD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAe,EACAc,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACA3C,EACAc,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACA3C,EACAc,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAnG,GACAwD,GACAC,GACAa,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAlG,GACAC,GACAC,GACAsD,GACAC,GACAC,GACAtE,GACAC,GACAC,GACAC,GACAY,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAqB,GACAC,GACAS,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAtC,GA8BJ,IAxBA/D,IADA+D,GAAIC,EAAWvF,EAAEiB,MAAOjB,EAAEkB,QAASjB,EAAEiB,QAAShB,EAAEgB,UACzCK,GACPE,GAAK6D,GAAE7D,GACPC,GAAK4D,GAAE5D,GACPC,GAAK2D,GAAE3D,GAGPgD,EAAQa,EAAWxF,EAAEyF,MAAOxF,EAAEwF,MAAOvF,EAAEuF,OAGvCR,GAAKjF,EAAEK,OACP6E,GAAKjF,EAAEI,OACP8E,GAAKjF,EAAEG,OAGPC,EAAON,EAAEI,KACTG,EAAON,EAAEG,KACTI,EAAON,EAAEE,KAGTK,EAAMgB,GAAG,GACTf,EAAMgB,GAAG,GACTf,EAAMgB,GAAG,GAGHiG,GAAKrG,GAA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EACAK,EACAtD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAtD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAU,EACAc,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAhD,EACAc,EACAK,EACAK,EACAK,EACAK,GACAK,GACAK,GACAK,GACAhD,GACAc,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAxG,GACAwD,GACAC,GACAa,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAvG,GACAC,GACAC,GACAsD,GACAC,GACAC,GACAtE,GACAC,GACAC,GACAC,GACAY,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAgB,GACAC,GACAS,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACA3C,GA8BJ,IAxBA/D,IADA+D,GAAIC,EAAWvF,EAAEiB,MAAOjB,EAAEkB,QAASjB,EAAEiB,QAAShB,EAAEgB,UACzCK,GACPE,GAAK6D,GAAE7D,GACPC,GAAK4D,GAAE5D,GACPC,GAAK2D,GAAE3D,GAGPgD,EAAQa,EAAWxF,EAAEyF,MAAOxF,EAAEwF,MAAOvF,EAAEuF,OAGvCR,GAAKjF,EAAEK,OACP6E,GAAKjF,EAAEI,OACP8E,GAAKjF,EAAEG,OAGPC,EAAON,EAAEI,KACTG,EAAON,EAAEG,KACTI,EAAON,EAAEE,KAGTK,EAAMgB,GAAG,GACTf,EAAMgB,GAAG,GACTf,EAAMgB,GAAG,GAGHsG,GAAK1G,GAAG,GAAI0G,GAAK,GAWtB,IAVKA,GAAKtD,GACTqD,GAAKC,GACLA,GAAK,IAELD,GAAKrD,EACLsD,IAAMtD,GAEPkD,EAAM5C,GAAOgD,GAAGxG,GAAG,GACnBqG,GAAM5C,GAAO+C,GAAGvG,GAAG,GACnBqG,GAAM5C,GAAO8C,GAAGtG,GAAG,GACbiG,GAAKrG,GAAG,GAAIqG,GAAK,GActB,IAbKA,GAAKjD,GACTgD,GAAKC,GACLA,GAAK,IAELD,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N,IAAMO,CACN,CACDT,IAAMgB,EACNf,IAAMgB,EACNf,IAAMgB,CACN,CACDlB,IAAMqB,EACNpB,IAAMqB,EACNpB,IAAMqB,CACN,CACDvB,IAAM0B,EACNzB,IAAM0B,EACNzB,IAAM0B,CACN,CACD5B,IAAM+B,EACN9B,IAAM+B,EACN9B,IAAM+B,CACN,CACDjC,IAAMoC,EACNnC,IAAMoC,EACNnC,IAAMoC,CACN,CACDtC,IAAMyC,EACNxC,IAAMyC,EACNxC,IAAMyC,CACN,CASV,EC7RA,SAA0BxD,EAAGC,EAAGC,EAAGC,GAClC,IAAIwE,EACArE,EACAC,EACAC,EACA+D,EACAC,EACAC,EACAhE,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAjD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAjD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAe,EACAc,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACA3C,EACAc,EACAK,EACAK,EACAK,EACAK,EACAK,GACAK,GACA3C,GACAc,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAnG,GACAwD,GACAC,GACAa,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAlG,GACAC,GACAC,GACAsD,GACAC,GACAC,GACAtE,GACAC,GACAC,GACAC,GACAY,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAqB,GACAC,GACAS,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAtC,GAmCJ,IA7BA/D,IADA+D,GAAIC,EAAWvF,EAAEiB,MAAOjB,EAAEkB,QAASjB,EAAEiB,QAAShB,EAAEgB,UACzCK,GACPE,GAAK6D,GAAE7D,GACPC,GAAK4D,GAAE5D,GACPC,GAAK2D,GAAE3D,GAGPgD,EAAQa,EAAWxF,EAAEyF,MAAOxF,EAAEwF,MAAOvF,EAAEuF,OAGvCR,GAAKjF,EAAEK,OACP6E,GAAKjF,EAAEI,OACP8E,GAAKjF,EAAEG,OAGPC,EAA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,CACDtC,IAAMyC,EACNxC,IAAMyC,EACNxC,IAAMyC,CACN,CACD3C,IAAM8C,EACN7C,IAAM8C,EACN7C,IAAM8C,CACN,CAUX,EC1TA,SAA2B7D,EAAGC,EAAGC,EAAGC,GACnC,IAAIwE,EACArE,EACAC,EACAC,EACA+D,EACAC,EACAC,EACAhE,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAtD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAtD,EACAW,EACAS,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAU,EACAc,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAhD,EACAc,EACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAhD,GACAc,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAxG,GACAwD,GACAC,GACAa,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAvG,GACAC,GACAC,GACAsD,GACAC,GACAC,GACAtE,GACAC,GACAC,GACAC,GACAY,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAgB,GACAC,GACAS,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACA3C,GAmCJ,IA7BA/D,IADA+D,GAAIC,EAAWvF,EAAEiB,MAAOjB,EAAEkB,QAASjB,EAAEiB,QAAShB,EAAEgB,UACzCK,GACPE,GAAK6D,GAAE7D,GACPC,GAAK4D,GAAE5D,GACPC,GAAK2D,GAAE3D,GAGPgD,EAAQa,EAAWxF,EAAEyF,MAAOxF,EAAEwF,MAAOvF,EAAEuF,OAGvCR,GAAKjF,EAAEK,OACP6E,GAAKjF,EAAEI,OACP8E,GAAKjF,EAAEG,OAGPC,EAAON,EAAEI,KACTG,EAAON,EAAEG,KACTI,EAAON,EAAEE,KAGTK,EAAMgB,GAAG,GACTf,EAAMgB,GAAG,GACTf,EAAMgB,GAAG,GAGT4C,EAAOvE,EAAEsE,UAAU,GACnBE,EAAOvE,EAAEqE,UAAU,GACnBG,EAAOvE,EAAEoE,UAAU,GAGb2D,GAAK1G,GAAG,GAAI0G,GAAK,GAWtB,IAVKA,GAAKtD,GACTqD,GAAKC,GACLA,GAAK,IAELD,GAAKrD,EACLsD,IAAMtD,GAEPkD,EAAM5C,GAAOgD,GAAGxG,GAAG,GACnBqG,GAAM5C,GAAO+C,GAAGvG,GAAG,GACnBqG,GAAM5C,GAAO8C,GAAGtG,GAAG,GACbiG,GAAKrG,GAAG,GAAIqG,GAAK,GActB,IAbKA,GAAKjD,GACTgD,GAAKC,GACLA,GAAK,IAELD,GAAKhD,EACLiD,IAAMjD,GAEPX,EAAMvC,GAAG,GAAOkG,GAAGlG,GAAG,GACtBwC,EAAMvC,GAAG,GAAOiG,GAAGjG,GAAG,GACtBwC,EAAMvC,GAAG,GAAOgG,GAAGhG,GAAG,GACtB6F,EAAMK,EAAQD,GAAGnG,GAAG,GACpBgG,GAAMK,GAAQF,GAAGlG,GAAG,GACpBgG,GAAMK,GAAQH,GAAGjG,GAAG,GACd4F,GAAKhG,GAAG,GAAIgG,GAAK,GActB,IAbKA,GAAK5C,GACT2C,GAAKC,GACLA,GAAK,IAELD,GAAK3C,EACL4C,IAAM5C,GAEPhB,EAAMlC,GAAG,GAAO6F,GAAG7F,GAAG,GACtBmC,EAAMlC,GAAG,GAAO4F,GAAG5F,GAAG,GACtBmC,EAAMlC,GAAG,GAAO2F,GAAG3F,GAAG,GACtBwF,EAAMK,EAAQD,GAAG9F,GAAG,GACpB2F,GAAMK,GAAQF,GAAG7F,GAAG,GACpB2F,GAAMK,GAAQH,GAAG5F,GAAG,GACduF,GAAK3F,GAAG,GAAI2F,GAAK,GActB,IAbKA,GAAKvC,GACTsC,GAAKC,GACLA,GAAK,IAELD,GAAKtC,EACLuC,IAAMvC,GAEPrB,EAAM7B,GAAG,GAAOwF,GAAGxF,GAAG,GACtB8B,EAAM7B,GAAG,GAAOuF,GAAGvF,GAAG,GACtB8B,EAAM7B,GAAG,GAAOsF,GAAGtF,GAAG,GACtBmF,EAAMK,EAAQD,GAAGzF,GAAG,GACpBsF,GAAMK,GAAQF,GAAGxF,GAAG,GACpBsF,GAAMK,GAAQH,GAAGvF,GAAG,GACdkF,GAAKtF,GAAG,GAAIsF,GAAK,GActB,IAbKA,GAAKlC,GACTiC,GAAKC,GACLA,GAAK,IAELD,GAAKjC,EACLkC,IAAMlC,GAEP1B,EAAMxB,GAAG,GAAOmF,GAAGnF,GAAG,GACtByB,EAAMxB,GAAG,GAAOkF,GAAGlF,GAAG,GACtByB,EAAMxB,GAAG,GAAOiF,GAAGjF,GAAG,GACtB8E,EAAMK,EAAQD,GAAGpF,GAAG,GACpBiF,GAAMK,GAAQF,GAAGnF,GAAG,GACpBiF,GAAMK,GAAQH,GAAGlF,GAAG,GACd6E,GAAKjF,GAAG,GAAIiF,GAAK,GActB,IAbKA,GAAK7B,GACT4B,GAAKC,GACLA,GAAK,IAELD,GAAK5B,EACL6B,IAAM7B,GAEP/B,EAAMnB,GAAG,GAAO8E,GAAG9E,GAAG,GACtBoB,EAAMnB,GAAG,GAAO6E,GAAG7E,GAAG,GACtBoB,EAAMnB,GAAG,GAAO4E,GAAG5E,GAAG,GACtByE,EAAMK,EAAQD,GAAG/E,GAAG,GACpB4E,GAAMK,GAAQF,GAAG9E,GAAG,GACpB4E,GAAMK,GAAQH,GAAG7E,GAAG,GACdwE,GAAK5E,GAAG,GAAI4E,GAAK,GActB,IAbKA,GAAKxB,GACTuB,GAAKC,GACLA,GAAK,IAELD,GAAKvB,EACLwB,IAAMxB,GAEPpC,EAAMd,GAAG,GAAOyE,GAAGzE,GAAG,GACtBe,EAAMd,GAAG,GAAOwE,GAAGxE,GAAG,GACtBe,EAAMd,GAAG,GAAOuE,GAAGvE,GAAG,GACtBoE,EAAMK,EAAQD,GAAG1E,GAAG,GACpBuE,GAAMK,GAAQF,GAAGzE,GAAG,GACpBuE,GAAMK,GAAQH,GAAGxE,GAAG,GACdmE,GAAKvE,GAAG,GAAIuE,GAAK,GActB,IAbKA,GAAKnB,GACTkB,GAAKC,GACLA,GAAK,IAELD,GAAKlB,EACLmB,IAAMnB,GAEPzC,EAAMT,GAAG,GAAOoE,GAAGpE,GAAG,GACtBU,EAAMT,GAAG,GAAOmE,GAAGnE,GAAG,GACtBU,EAAMT,GAAG,GAAOkE,GAAGlE,GAAG,GACtB+D,EAAMK,EAAQD,GAAGrE,GAAG,GACpBkE,EAAMK,GAAQF,GAAGpE,GAAG,GACpBkE,GAAMK,GAAQH,GAAGnE,GAAG,GACd0D,GAAK9D,GAAG,GAAI8D,GAAK,GActB,IAbKA,GAAKV,GACTK,GAAKK,GACLA,GAAK,IAELL,GAAKL,EACLU,IAAMV,GAEP9C,EAAMJ,GAAG,GAAOuD,GAAGvD,GAAG,GACtBK,EAAMJ,GAAG,GAAOsD,GAAGtD,GAAG,GACtBK,EAAMJ,GAAG,GAAOqD,GAAGrD,GAAG,GACtBiD,EAAMc,EAAQL,GAAG5D,GAAG,GACpBoD,EAAMc,EAAQN,GAAG3D,GAAG,GACpBoD,GAAMc,GAAQP,GAAG1D,GAAG,GACdyD,GAAK7D,GAAG,GAAI6D,GAAK,GAmBtB,IAlBKA,GAAKT,GACTI,GAAKK,GACLA,GAAK,IAELL,GAAKJ,EACLS,IAAMT,GAGP9D,GAAK+D,EAAQQ,GAAG3D,GAAG,GACnBX,GAAK+D,EAAQO,GAAG1D,GAAG,GACnBX,GAAK+D,GAAQM,GAAGzD,GAAG,GAGnBP,EAAMK,GAAG,GAAOsD,GAAGtD,GAAG,GACtBJ,EAAMK,GAAG,GAAOqD,GAAGrD,GAAG,GACtBJ,EAAMK,GAAG,GAAOoD,GAAGpD,GAAG,GAGhByC,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAK4D,GAAI5D,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKoD,GAAIpD,KAAO,CAC7B,IAAMZ,GAAK,EAAGA,GAAK+D,GAAI/D,KACtByD,EAAMjE,EAAMO,GAAIZ,EAAKoE,EAAMjE,EAAMO,IAAM2D,EAAMjE,EAAMO,MACnDD,IAAMJ,EACNK,IAAMJ,EACNK,IAAMJ,EAEPE,IAAMO,EACNN,IAAMO,EACNN,IAAMO,CACN,CACDT,IAAMgB,EACNf,IAAMgB,EACNf,IAAMgB,CACN,CACDlB,IAAMqB,EACNpB,IAAMqB,EACNpB,IAAMqB,CACN,CACDvB,IAAM0B,EACNzB,IAAM0B,EACNzB,IAAM0B,CACN,CACD5B,IAAM+B,EACN9B,IAAM+B,EACN9B,IAAM+B,CACN,CACDjC,IAAMoC,EACNnC,IAAMoC,EACNnC,IAAMoC,CACN,CACDtC,IAAMyC,EACNxC,IAAMyC,EACNxC,IAAMyC,CACN,CACD3C,IAAM8C,EACN7C,IAAM8C,EACN7C,IAAM8C,CACN,CACDhD,IAAMmD,EACNlD,IAAMmD,EACNlD,IAAMmD,CACN,CAWZ,GxCvVIiE,EAAWpI,EAAOqI,OAAS,EAc/B,SAASC,EAAcrI,EAAGC,EAAGC,GAC5B,OAAOoI,EAAc,CAAEtI,EAAGC,EAAGC,GAAK,oBAAoB,EACvD,CA+DA,SAASqI,EAAQC,EAAQrI,GACxB,IAAIsI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3H,EACAC,EACAC,EACAsD,EACAC,EACAC,EACAkE,EACArJ,EACAC,EACAC,EACAoJ,EACAC,EAYJ,GATAvJ,EAAIwJ,EAAgBhB,EAAQ,IAC5BvI,EAAIuJ,EAAgBhB,EAAQ,IAC5BtI,EAAIsJ,EAAgBhB,EAAQ,IAG5BK,EAAM7I,EAAEiB,MACR6H,EAAM7I,EAAEgB,MACR8H,EAAM7I,EAAEe,OACRwH,EAAQI,EAAIT,UACGU,EAAIV,QAAUK,IAAUM,EAAIX,OAC1C,MAAM,IAAIqB,MAAOC,EAAQ,uIAAwIjB,EAAOK,EAAIV,OAAQW,EAAIX,SAGzL,GAAe,IAAVK,EACJ,OAAKJ,EAAcrI,EAAGC,EAAGC,GACjBmE,EAAiBoE,GAASzI,EAAGC,EAAGC,EAAGC,GAEpCJ,EAAQ0I,GAASzI,EAAGC,EAAGC,EAAGC,GAKlC,IAFAgJ,EAAM,EACNE,EAAK,EACCE,EAAI,EAAGA,EAAId,EAAOc,IAAM,CAE7B,IADAD,EAAIT,EAAKU,MACET,EAAKS,IAAOD,IAAMP,EAAKQ,GACjC,MAAM,IAAIE,MAAOC,EAAO,WAGzBP,GAAOG,EAGI,IAANA,IACJD,GAAM,EAEP,CAED,GAAa,IAARF,EAAL,CAIA,GAAe,IAAVV,EACJ,OAAKJ,EAAcrI,EAAGC,EAAGC,GACjBmE,EAAiBoE,GAASzI,EAAGC,EAAGC,EAAGC,GAEpCJ,EAAQ0I,GAASzI,EAAGC,EAAGC,EAAGC,GAOlC,GALAsB,EAAKzB,EAAEkB,QACPQ,EAAKzB,EAAEiB,QACPS,EAAKzB,EAAEgB,QAGFmI,IAAOZ,EAAM,EAAI,CAErB,IAAMc,EAAI,EAAGA,EAAId,GACE,IAAbI,EAAKU,GADaA,KAWxB,OANAvJ,EAAEiB,MAAQ,CAAE4H,EAAIU,IAChBtJ,EAAEgB,MAAQjB,EAAEiB,MACZf,EAAEe,MAAQjB,EAAEiB,MACZjB,EAAEkB,QAAU,CAAEO,EAAG8H,IACjBtJ,EAAEiB,QAAU,CAAEQ,EAAG6H,IACjBrJ,EAAEgB,QAAU,CAAES,EAAG4H,IACZlB,EAAcrI,EAAGC,EAAGC,GACjBmE,EAAiB,GAAKrE,EAAGC,EAAGC,EAAGC,GAEhCJ,EAAQ,GAAKC,EAAGC,EAAGC,EAAGC,EAC7B,CAOD,GANA6I,EAAMW,EAAgBlI,GACtBwH,EAAMU,EAAgBjI,GACtBwH,EAAMS,EAAgBhI,GAGtByH,EAAMQ,EAAenI,GACR,IAARuH,GAAqB,IAARC,GAAqB,IAARC,GAAaE,IAAQQ,EAAelI,IAAQ0H,IAAQQ,EAAejI,GAAO,CAOxG,GALA+G,EAAOmB,EAAuBhB,EAAKpH,EAAIzB,EAAEK,QACzCsI,EAAOkB,EAAuBf,EAAKpH,EAAIzB,EAAEI,QACzCuI,EAAOiB,EAAuBd,EAAKpH,EAAIzB,EAAEG,QAIxC8I,IAAUT,EAAK,GAAGA,EAAK,GAAG,GAC1BS,IAAUR,EAAK,GAAGA,EAAK,GAAG,GAC1BQ,IAAUP,EAAK,GAAGA,EAAK,GAAG,EA2B1B,OAvBC3D,EADY,IAAR+D,EACCN,EAAM,GAENA,EAAM,GAGXxD,EADY,IAAR+D,EACCN,EAAM,GAENA,EAAM,GAGXxD,EADY,IAAR+D,EACCN,EAAM,GAENA,EAAM,GAEZ5I,EAAEiB,MAAQ,CAAEkI,GACZlJ,EAAEgB,MAAQjB,EAAEiB,MACZf,EAAEe,MAAQjB,EAAEiB,MACZjB,EAAEkB,QAAU,CAAE8H,GACd/I,EAAEiB,QAAU,CAAE+H,GACd/I,EAAEgB,QAAU,CAAEgI,GACdlJ,EAAEK,OAAS4E,EACXhF,EAAEI,OAAS6E,EACXhF,EAAEG,OAAS8E,EACNkD,EAAcrI,EAAGC,EAAGC,GACjBmE,EAAiB,GAAKrE,EAAGC,EAAGC,EAAGC,GAEhCJ,EAAQ,GAAKC,EAAGC,EAAGC,EAAGC,GAK9B,GAAKsI,GAASN,EAEb,OAAKE,EAAcrI,EAAGC,EAAGC,GACjBmE,EAAiBoE,GAASzI,EAAGC,EAAGC,EAAW,IAARkJ,EAAWjJ,GAE/CJ,EAAQ0I,GAASzI,EAAGC,EAAGC,EAAW,IAARkJ,EAAWjJ,EAG7C,CAID,OAAKsI,GAASN,EACRE,EAAcrI,EAAGC,EAAGC,GACjBgI,EAAyBO,EAAM,GAAKzI,EAAGC,EAAGC,EAAGC,GAE9CuE,EAAgB+D,EAAM,GAAKzI,EAAGC,EAAGC,EAAGC,GAGvCkI,EAAcrI,EAAGC,EAAGC,GFjP1B,SAAmBF,EAAGC,EAAGC,EAAGC,GAC3B,IAAIG,EACAC,EACAC,EACAsJ,EACAC,EACAC,EACAzF,EACAC,EACAC,EACA0E,EACA5H,EACAE,EACAC,EACAC,EACAsD,EACAC,EACAC,EACAtE,EACAC,EAEAyI,EAiCJ,IA/BAhI,EAAKvB,EAAEiB,MAGPkI,EAAMc,EAAO1I,GAGbjB,EAAON,EAAEI,KACTG,EAAON,EAAEG,KACTI,EAAON,EAAEE,KAGTqB,EAAKzB,EAAEkB,QACPQ,EAAKzB,EAAEiB,QACPS,EAAKzB,EAAEgB,QAGP+D,EAAKjF,EAAEK,OACP6E,EAAKjF,EAAEI,OACP8E,EAAKjF,EAAEG,OAGPyJ,EAAO9J,EAAEkK,MACTH,EAAO9J,EAAEiK,MACTF,EAAO9J,EAAEgK,MAGT3F,EAAOvE,EAAEsE,UAAW,GACpBE,EAAOvE,EAAEqE,UAAW,GACpBG,EAAOvE,EAAEoE,UAAW,GAGdiF,EAAI,EAAGA,EAAIJ,EAAKI,IACrB1I,EAAKsJ,EAAW5I,EAAIE,EAAIwD,EAAI6E,EAAMP,EAAGzJ,GACrCgB,EAAKqJ,EAAW5I,EAAIG,EAAIwD,EAAI6E,EAAMR,EAAGzJ,GAErC2E,EAAMjE,EADD2J,EAAW5I,EAAII,EAAIwD,EAAI6E,EAAMT,EAAGzJ,GACrBK,EAAKoE,EAAMjE,EAAMO,GAAM2D,EAAMjE,EAAMO,IAErD,CEsLSsJ,CAAkBpK,EAAGC,EAAGC,EAAGC,QD1PpC,SAAmBH,EAAGC,EAAGC,EAAGC,GAC3B,IAAIG,EACAC,EACAC,EACAsJ,EACAC,EACAC,EACAb,EACA5H,EACAE,EACAC,EACAC,EACAsD,EACAC,EACAC,EACAtE,EACAC,EAEAyI,EA4BJ,IA1BAhI,EAAKvB,EAAEiB,MAGPkI,EAAMc,EAAO1I,GAGbjB,EAAON,EAAEI,KACTG,EAAON,EAAEG,KACTI,EAAON,EAAEE,KAGTqB,EAAKzB,EAAEkB,QACPQ,EAAKzB,EAAEiB,QACPS,EAAKzB,EAAEgB,QAGP+D,EAAKjF,EAAEK,OACP6E,EAAKjF,EAAEI,OACP8E,EAAKjF,EAAEG,OAGPyJ,EAAO9J,EAAEkK,MACTH,EAAO9J,EAAEiK,MACTF,EAAO9J,EAAEgK,MAGHX,EAAI,EAAGA,EAAIJ,EAAKI,IACrB1I,EAAKsJ,EAAW5I,EAAIE,EAAIwD,EAAI6E,EAAMP,EAAGzJ,GACrCgB,EAAKqJ,EAAW5I,EAAIG,EAAIwD,EAAI6E,EAAMR,EAAGzJ,GAErCU,EADK2J,EAAW5I,EAAII,EAAIwD,EAAI6E,EAAMT,EAAGzJ,IACxBK,EAAKG,EAAMO,GAAMN,EAAMO,GAEtC,CCwMCuJ,CAAUrK,EAAGC,EAAGC,EAAGC,EAxGlB,CAyGF"}