{
  "version": 3,
  "sources": ["../lib/2d_blocked_accessors.js", "../lib/3d_blocked_accessors.js", "../lib/4d_blocked_accessors.js", "../lib/5d_blocked_accessors.js", "../lib/6d_blocked_accessors.js", "../lib/7d_blocked_accessors.js", "../lib/8d_blocked_accessors.js", "../lib/9d_blocked_accessors.js", "../lib/10d_blocked_accessors.js", "../lib/2d_blocked.js", "../lib/3d_blocked.js", "../lib/4d_blocked.js", "../lib/5d_blocked.js", "../lib/6d_blocked.js", "../lib/7d_blocked.js", "../lib/8d_blocked.js", "../lib/9d_blocked.js", "../lib/10d_blocked.js", "../lib/0d_accessors.js", "../lib/1d_accessors.js", "../lib/2d_accessors.js", "../lib/3d_accessors.js", "../lib/4d_accessors.js", "../lib/5d_accessors.js", "../lib/6d_accessors.js", "../lib/7d_accessors.js", "../lib/8d_accessors.js", "../lib/9d_accessors.js", "../lib/10d_accessors.js", "../lib/nd_accessors.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/4d.js", "../lib/5d.js", "../lib/6d.js", "../lib/7d.js", "../lib/8d.js", "../lib/9d.js", "../lib/10d.js", "../lib/nd.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary2d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary2d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar ox1;\n\tvar oy1;\n\tvar oz1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\toz1 = oz + ( j1*sz[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary3d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary3d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar oz1;\n\tvar oz2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\toz2 = oz + ( j2*sz[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary4d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary4d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\toz3 = oz + ( j3*sz[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary5d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary5d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\toz4 = oz + ( j4*sz[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary6d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary6d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\toz5 = oz + ( j5*sz[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary7d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary7d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\toz6 = oz + ( j6*sz[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary8d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary8d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\toz7 = oz + ( j7*sz[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary9d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary9d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\toz8 = oz + ( j8*sz[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function, max-lines */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary10d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary10d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar oz9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\toz9 = oz + ( j9*sz[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tdz9 = sz[9] - ( s8*sz[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\toz8 = oz9 + ( j8*sz[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary2d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary2d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar ox1;\n\tvar oy1;\n\tvar oz1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\toz1 = oz + ( j1*sz[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary3d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary3d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar oz1;\n\tvar oz2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\toz2 = oz + ( j2*sz[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary4d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary4d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\toz3 = oz + ( j3*sz[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary5d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary5d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\toz4 = oz + ( j4*sz[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary6d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary6d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\toz5 = oz + ( j5*sz[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary7d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary7d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\toz6 = oz + ( j6*sz[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary8d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary8d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\toz7 = oz + ( j7*sz[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary9d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary9d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\toz8 = oz + ( j8*sz[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function, max-lines */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-binary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-binary-tiling-block-size' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary10d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary10d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar oz9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\toz9 = oz + ( j9*sz[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tdz9 = sz[9] - ( s8*sz[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\toz8 = oz9 + ( j8*sz[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedbinary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in zero-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0 ] );\n* var ybuf = toAccessorArray( [ 2.0 ] );\n* var zbuf = toAccessorArray( [ 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n* var sz = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary0d( x, y, z, fcn );\n*\n* var v = z.data.get( 0 );\n* // returns 3.0\n*/\nfunction binary0d( x, y, z, fcn ) {\n\tz.accessors[ 1 ]( z.data, z.offset, fcn( x.accessors[ 0 ]( x.data, x.offset ), y.accessors[ 0 ]( y.data, y.offset ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in one-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 12 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n* var sz = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary1d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary1d( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dy0;\n\tvar dz0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\tdz0 = z.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\tiz += dz0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary2d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary2d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t\tdz0 = sz[ 1 ];\n\t\tdz1 = sz[ 0 ] - ( S0*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\tiz += dz0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t\tiz += dz1;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary3d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary3d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 2 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[2] );\n\t\tdz2 = sz[ 0 ] - ( S1*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\tiz += dz0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t\tiz += dz1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t\tiz += dz2;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary4d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary4d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t\tdz0 = sz[ 3 ];\n\t\tdz1 = sz[ 2 ] - ( S0*sz[3] );\n\t\tdz2 = sz[ 1 ] - ( S1*sz[2] );\n\t\tdz3 = sz[ 0 ] - ( S2*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t\tiz += dz2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t\tiz += dz3;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary5d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary5d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t\tdz0 = sz[ 4 ];\n\t\tdz1 = sz[ 3 ] - ( S0*sz[4] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[3] );\n\t\tdz3 = sz[ 1 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 0 ] - ( S3*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t\tiz += dz1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t\tiz += dz2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t\tiz += dz3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t\tiz += dz4;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary6d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary6d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t\tdz0 = sz[ 5 ];\n\t\tdz1 = sz[ 4 ] - ( S0*sz[5] );\n\t\tdz2 = sz[ 3 ] - ( S1*sz[4] );\n\t\tdz3 = sz[ 2 ] - ( S2*sz[3] );\n\t\tdz4 = sz[ 1 ] - ( S3*sz[2] );\n\t\tdz5 = sz[ 0 ] - ( S4*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t\tiz += dz3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t\tiz += dz4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t\tiz += dz5;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary7d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary7d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t\tdz0 = sz[ 6 ];\n\t\tdz1 = sz[ 5 ] - ( S0*sz[6] );\n\t\tdz2 = sz[ 4 ] - ( S1*sz[5] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[4] );\n\t\tdz4 = sz[ 2 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 1 ] - ( S4*sz[2] );\n\t\tdz6 = sz[ 0 ] - ( S5*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t\tiz += dz3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t\tiz += dz4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t\tiz += dz5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t\tiz += dz6;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary8d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary8d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t\tdz0 = sz[ 7 ];\n\t\tdz1 = sz[ 6 ] - ( S0*sz[7] );\n\t\tdz2 = sz[ 5 ] - ( S1*sz[6] );\n\t\tdz3 = sz[ 4 ] - ( S2*sz[5] );\n\t\tdz4 = sz[ 3 ] - ( S3*sz[4] );\n\t\tdz5 = sz[ 2 ] - ( S4*sz[3] );\n\t\tdz6 = sz[ 1 ] - ( S5*sz[2] );\n\t\tdz7 = sz[ 0 ] - ( S6*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t\tiz += dz4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t\tiz += dz5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t\tiz += dz6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t\tiz += dz7;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary9d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary9d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t\tdz0 = sz[ 8 ];\n\t\tdz1 = sz[ 7 ] - ( S0*sz[8] );\n\t\tdz2 = sz[ 6 ] - ( S1*sz[7] );\n\t\tdz3 = sz[ 5 ] - ( S2*sz[6] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[5] );\n\t\tdz5 = sz[ 3 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 2 ] - ( S5*sz[3] );\n\t\tdz7 = sz[ 1 ] - ( S6*sz[2] );\n\t\tdz8 = sz[ 0 ] - ( S7*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t\tiz += dz5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t\tiz += dz6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t\tiz += dz7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t\tiz += dz8;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary10d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary10d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t\tdz0 = sz[ 9 ];\n\t\tdz1 = sz[ 8 ] - ( S0*sz[9] );\n\t\tdz2 = sz[ 7 ] - ( S1*sz[8] );\n\t\tdz3 = sz[ 6 ] - ( S2*sz[7] );\n\t\tdz4 = sz[ 5 ] - ( S3*sz[6] );\n\t\tdz5 = sz[ 4 ] - ( S4*sz[5] );\n\t\tdz6 = sz[ 3 ] - ( S5*sz[4] );\n\t\tdz7 = sz[ 2 ] - ( S6*sz[3] );\n\t\tdz8 = sz[ 1 ] - ( S7*sz[2] );\n\t\tdz9 = sz[ 0 ] - ( S8*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t\tdz9 = sz[ 9 ] - ( S8*sz[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t\tiz += dz6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t\tiz += dz7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t\tiz += dz8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t\tiz += dz9;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in n-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var copy = require( '@stdlib/array-base-copy' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binarynd( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binarynd( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( sh, sz, oz, ordz, i, MODE );\n\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in zero-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0 ] );\n* var ybuf = new Float64Array( [ 2.0 ] );\n* var zbuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n* var sz = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary0d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 3.0 ]\n*/\nfunction binary0d( x, y, z, fcn ) {\n\tz.data[ z.offset ] = fcn( x.data[ x.offset ], y.data[ y.offset ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in one-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 12 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n* var sz = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary1d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary1d( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dy0;\n\tvar dz0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\tdz0 = z.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\tiz += dz0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary2d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary2d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t\tdz0 = sz[ 1 ];\n\t\tdz1 = sz[ 0 ] - ( S0*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\tiz += dz0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t\tiz += dz1;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary3d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary3d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 2 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[2] );\n\t\tdz2 = sz[ 0 ] - ( S1*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\tiz += dz0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t\tiz += dz1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t\tiz += dz2;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary4d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary4d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t\tdz0 = sz[ 3 ];\n\t\tdz1 = sz[ 2 ] - ( S0*sz[3] );\n\t\tdz2 = sz[ 1 ] - ( S1*sz[2] );\n\t\tdz3 = sz[ 0 ] - ( S2*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t\tiz += dz2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t\tiz += dz3;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary5d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary5d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t\tdz0 = sz[ 4 ];\n\t\tdz1 = sz[ 3 ] - ( S0*sz[4] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[3] );\n\t\tdz3 = sz[ 1 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 0 ] - ( S3*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t\tiz += dz1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t\tiz += dz2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t\tiz += dz3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t\tiz += dz4;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary6d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary6d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t\tdz0 = sz[ 5 ];\n\t\tdz1 = sz[ 4 ] - ( S0*sz[5] );\n\t\tdz2 = sz[ 3 ] - ( S1*sz[4] );\n\t\tdz3 = sz[ 2 ] - ( S2*sz[3] );\n\t\tdz4 = sz[ 1 ] - ( S3*sz[2] );\n\t\tdz5 = sz[ 0 ] - ( S4*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t\tiz += dz3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t\tiz += dz4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t\tiz += dz5;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary7d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary7d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t\tdz0 = sz[ 6 ];\n\t\tdz1 = sz[ 5 ] - ( S0*sz[6] );\n\t\tdz2 = sz[ 4 ] - ( S1*sz[5] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[4] );\n\t\tdz4 = sz[ 2 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 1 ] - ( S4*sz[2] );\n\t\tdz6 = sz[ 0 ] - ( S5*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t\tiz += dz3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t\tiz += dz4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t\tiz += dz5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t\tiz += dz6;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary8d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary8d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t\tdz0 = sz[ 7 ];\n\t\tdz1 = sz[ 6 ] - ( S0*sz[7] );\n\t\tdz2 = sz[ 5 ] - ( S1*sz[6] );\n\t\tdz3 = sz[ 4 ] - ( S2*sz[5] );\n\t\tdz4 = sz[ 3 ] - ( S3*sz[4] );\n\t\tdz5 = sz[ 2 ] - ( S4*sz[3] );\n\t\tdz6 = sz[ 1 ] - ( S5*sz[2] );\n\t\tdz7 = sz[ 0 ] - ( S6*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t\tiz += dz4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t\tiz += dz5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t\tiz += dz6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t\tiz += dz7;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary9d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary9d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t\tdz0 = sz[ 8 ];\n\t\tdz1 = sz[ 7 ] - ( S0*sz[8] );\n\t\tdz2 = sz[ 6 ] - ( S1*sz[7] );\n\t\tdz3 = sz[ 5 ] - ( S2*sz[6] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[5] );\n\t\tdz5 = sz[ 3 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 2 ] - ( S5*sz[3] );\n\t\tdz7 = sz[ 1 ] - ( S6*sz[2] );\n\t\tdz8 = sz[ 0 ] - ( S7*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t\tiz += dz5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t\tiz += dz6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t\tiz += dz7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t\tiz += dz8;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len, max-lines-per-function */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary10d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary10d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t\tdz0 = sz[ 9 ];\n\t\tdz1 = sz[ 8 ] - ( S0*sz[9] );\n\t\tdz2 = sz[ 7 ] - ( S1*sz[8] );\n\t\tdz3 = sz[ 6 ] - ( S2*sz[7] );\n\t\tdz4 = sz[ 5 ] - ( S3*sz[6] );\n\t\tdz5 = sz[ 4 ] - ( S4*sz[5] );\n\t\tdz6 = sz[ 3 ] - ( S5*sz[4] );\n\t\tdz7 = sz[ 2 ] - ( S6*sz[3] );\n\t\tdz8 = sz[ 1 ] - ( S7*sz[2] );\n\t\tdz9 = sz[ 0 ] - ( S8*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t\tdz9 = sz[ 9 ] - ( S8*sz[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t\tiz += dz6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t\tiz += dz7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t\tiz += dz8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t\tiz += dz9;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in n-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binarynd( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binarynd( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( sh, sz, oz, ordz, i, MODE );\n\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar minmaxViewBufferIndex = require( '@stdlib/ndarray-base-minmax-view-buffer-index' );\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar anyIsEntryIn = require( '@stdlib/array-base-any-is-entry-in' );\nvar format = require( '@stdlib/string-format' );\nvar blockedaccessorbinary2d = require( './2d_blocked_accessors.js' );\nvar blockedaccessorbinary3d = require( './3d_blocked_accessors.js' );\nvar blockedaccessorbinary4d = require( './4d_blocked_accessors.js' );\nvar blockedaccessorbinary5d = require( './5d_blocked_accessors.js' );\nvar blockedaccessorbinary6d = require( './6d_blocked_accessors.js' );\nvar blockedaccessorbinary7d = require( './7d_blocked_accessors.js' );\nvar blockedaccessorbinary8d = require( './8d_blocked_accessors.js' );\nvar blockedaccessorbinary9d = require( './9d_blocked_accessors.js' );\nvar blockedaccessorbinary10d = require( './10d_blocked_accessors.js' );\nvar blockedbinary2d = require( './2d_blocked.js' );\nvar blockedbinary3d = require( './3d_blocked.js' );\nvar blockedbinary4d = require( './4d_blocked.js' );\nvar blockedbinary5d = require( './5d_blocked.js' );\nvar blockedbinary6d = require( './6d_blocked.js' );\nvar blockedbinary7d = require( './7d_blocked.js' );\nvar blockedbinary8d = require( './8d_blocked.js' );\nvar blockedbinary9d = require( './9d_blocked.js' );\nvar blockedbinary10d = require( './10d_blocked.js' );\nvar accessorbinary0d = require( './0d_accessors.js' );\nvar accessorbinary1d = require( './1d_accessors.js' );\nvar accessorbinary2d = require( './2d_accessors.js' );\nvar accessorbinary3d = require( './3d_accessors.js' );\nvar accessorbinary4d = require( './4d_accessors.js' );\nvar accessorbinary5d = require( './5d_accessors.js' );\nvar accessorbinary6d = require( './6d_accessors.js' );\nvar accessorbinary7d = require( './7d_accessors.js' );\nvar accessorbinary8d = require( './8d_accessors.js' );\nvar accessorbinary9d = require( './9d_accessors.js' );\nvar accessorbinary10d = require( './10d_accessors.js' );\nvar accessorbinarynd = require( './nd_accessors.js' );\nvar binary0d = require( './0d.js' );\nvar binary1d = require( './1d.js' );\nvar binary2d = require( './2d.js' );\nvar binary3d = require( './3d.js' );\nvar binary4d = require( './4d.js' );\nvar binary5d = require( './5d.js' );\nvar binary6d = require( './6d.js' );\nvar binary7d = require( './7d.js' );\nvar binary8d = require( './8d.js' );\nvar binary9d = require( './9d.js' );\nvar binary10d = require( './10d.js' );\nvar binarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar BINARY = [\n\tbinary0d,\n\tbinary1d,\n\tbinary2d,\n\tbinary3d,\n\tbinary4d,\n\tbinary5d,\n\tbinary6d,\n\tbinary7d,\n\tbinary8d,\n\tbinary9d,\n\tbinary10d\n];\nvar ACCESSOR_BINARY = [\n\taccessorbinary0d,\n\taccessorbinary1d,\n\taccessorbinary2d,\n\taccessorbinary3d,\n\taccessorbinary4d,\n\taccessorbinary5d,\n\taccessorbinary6d,\n\taccessorbinary7d,\n\taccessorbinary8d,\n\taccessorbinary9d,\n\taccessorbinary10d\n];\nvar BLOCKED_BINARY = [\n\tblockedbinary2d, // 0\n\tblockedbinary3d,\n\tblockedbinary4d,\n\tblockedbinary5d,\n\tblockedbinary6d,\n\tblockedbinary7d,\n\tblockedbinary8d,\n\tblockedbinary9d,\n\tblockedbinary10d // 8\n];\nvar BLOCKED_ACCESSOR_BINARY = [\n\tblockedaccessorbinary2d, // 0\n\tblockedaccessorbinary3d,\n\tblockedaccessorbinary4d,\n\tblockedaccessorbinary5d,\n\tblockedaccessorbinary6d,\n\tblockedaccessorbinary7d,\n\tblockedaccessorbinary8d,\n\tblockedaccessorbinary9d,\n\tblockedaccessorbinary10d // 8\n];\nvar MAX_DIMS = BINARY.length - 1;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if at least one ndarray data buffer implements the accessor protocol.\n*\n* @private\n* @param {ndarrayLike} x - first ndarray\n* @param {ndarrayLike} y - second ndarray\n* @param {ndarrayLike} z - third ndarray\n* @returns {boolean} boolean indicating whether an ndarray data buffer implements the accessor protocol\n*/\nfunction hasAccessors( x, y, z ) {\n\treturn anyIsEntryIn( [ x, y, z ], 'accessorProtocol', true );\n}\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in input ndarrays and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an object with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing two input arrays and one output array\n* @param {Callback} fcn - binary callback\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var getData = require( '@stdlib/ndarray-data-buffer' );\n*\n* function add( a, b ) {\n*     return a + b;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zbuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n* var sz = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarrays:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n* var y = new ndarray( 'float64', ybuf, shape, sy, oy, 'row-major' );\n* var z = new ndarray( 'float64', zbuf, shape, sz, oz, 'row-major' );\n*\n* // Apply the binary function:\n* binary( [ x, y, z ], add );\n*\n* console.log( getData( z ) );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction binary( arrays, fcn ) { // eslint-disable-line max-statements\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar zmmv;\n\tvar shx;\n\tvar shy;\n\tvar shz;\n\tvar iox;\n\tvar ioy;\n\tvar ioz;\n\tvar len;\n\tvar ord;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\tz = ndarray2object( arrays[ 2 ] );\n\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tshz = z.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length || ndims !== shz.length ) {\n\t\tthrow new Error( format( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == %d. ndims(y) == %d. ndims(z) == %d.', ndims, shy.length, shz.length ) );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ ndims ]( x, y, z, fcn );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] || d !== shz[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Arrays must have the same shape.' );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ ndims ]( x, y, z, fcn );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Determine whether the ndarrays have only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tz.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tz.strides = [ sz[i] ];\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ 1 ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ 1 ]( x, y, z, fcn );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\tioz = iterationOrder( sz ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sx );\n\tif ( iox !== 0 && ioy !== 0 && ioz !== 0 && ord === strides2order( sy ) && ord === strides2order( sz ) ) { // eslint-disable-line max-len\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\t\tzmmv = minmaxViewBufferIndex( shz, sz, z.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif (\n\t\t\tlen === ( xmmv[1]-xmmv[0]+1 ) &&\n\t\t\tlen === ( ymmv[1]-ymmv[0]+1 ) &&\n\t\t\tlen === ( zmmv[1]-zmmv[0]+1 )\n\t\t) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioz === 1 ) {\n\t\t\t\toz = zmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toz = zmmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tz.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tz.strides = [ ioz ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tz.offset = oz;\n\t\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\t\treturn ACCESSOR_BINARY[ 1 ]( x, y, z, fcn );\n\t\t\t}\n\t\t\treturn BINARY[ 1 ]( x, y, z, fcn );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, ord === 1, fcn );\n\t\t\t}\n\t\t\treturn BINARY[ ndims ]( x, y, z, ord === 1, fcn );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn BLOCKED_ACCESSOR_BINARY[ ndims-2 ]( x, y, z, fcn );\n\t\t}\n\t\treturn BLOCKED_BINARY[ ndims-2 ]( x, y, z, fcn );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( hasAccessors( x, y, z ) ) {\n\t\treturn accessorbinarynd( x, y, z, fcn );\n\t}\n\tbinarynd( x, y, z, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary callback to elements in input ndarrays and assign results to elements in an output ndarray.\n*\n* @module @stdlib/ndarray-base-binary\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var getData = require( '@stdlib/ndarray-data-buffer' );\n* var binary = require( '@stdlib/ndarray-base-binary' );\n*\n* function add( a, b ) {\n*     return a + b;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zbuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n* var sz = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarrays:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n* var y = new ndarray( 'float64', ybuf, shape, sy, oy, 'row-major' );\n* var z = new ndarray( 'float64', zbuf, shape, sz, oz, 'row-major' );\n*\n* // Apply the binary function:\n* binary( [ x, y, z ], add );\n*\n* console.log( getData( z ) );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary2d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dy0", "dy1", "dz0", "dz1", "ox1", "oy1", "oz1", "sh", "s0", "s1", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "j0", "j1", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary3d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dy0", "dy1", "dy2", "dz0", "dz1", "dz2", "ox1", "ox2", "oy1", "oy2", "oz1", "oz2", "sh", "s0", "s1", "s2", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "j0", "j1", "j2", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary4d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dy0", "dy1", "dy2", "dy3", "dz0", "dz1", "dz2", "dz3", "ox1", "ox2", "ox3", "oy1", "oy2", "oy3", "oz1", "oz2", "oz3", "sh", "s0", "s1", "s2", "s3", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary5d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dy0", "dy1", "dy2", "dy3", "dy4", "dz0", "dz1", "dz2", "dz3", "dz4", "ox1", "ox2", "ox3", "ox4", "oy1", "oy2", "oy3", "oy4", "oz1", "oz2", "oz3", "oz4", "sh", "s0", "s1", "s2", "s3", "s4", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary6d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "ox1", "ox2", "ox3", "ox4", "ox5", "oy1", "oy2", "oy3", "oy4", "oy5", "oz1", "oz2", "oz3", "oz4", "oz5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary7d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary8d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "ox7", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oy7", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "oz7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary9d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "ox7", "ox8", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oy7", "oy8", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "oz7", "oz8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "o", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary10d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dx9", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dy9", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "dz9", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "ox7", "ox8", "ox9", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oy7", "oy8", "oy9", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "oz7", "oz8", "oz9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary2d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dy0", "dy1", "dz0", "dz1", "ox1", "oy1", "oz1", "sh", "s0", "s1", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "j0", "j1", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary3d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dy0", "dy1", "dy2", "dz0", "dz1", "dz2", "ox1", "ox2", "oy1", "oy2", "oz1", "oz2", "sh", "s0", "s1", "s2", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "j0", "j1", "j2", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary4d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dy0", "dy1", "dy2", "dy3", "dz0", "dz1", "dz2", "dz3", "ox1", "ox2", "ox3", "oy1", "oy2", "oy3", "oz1", "oz2", "oz3", "sh", "s0", "s1", "s2", "s3", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary5d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dy0", "dy1", "dy2", "dy3", "dy4", "dz0", "dz1", "dz2", "dz3", "dz4", "ox1", "ox2", "ox3", "ox4", "oy1", "oy2", "oy3", "oy4", "oz1", "oz2", "oz3", "oz4", "sh", "s0", "s1", "s2", "s3", "s4", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary6d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "ox1", "ox2", "ox3", "ox4", "ox5", "oy1", "oy2", "oy3", "oy4", "oy5", "oz1", "oz2", "oz3", "oz4", "oz5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary7d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary8d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "ox7", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oy7", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "oz7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary9d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "ox7", "ox8", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oy7", "oy8", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "oz7", "oz8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "o", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "blockedbinary10d", "x", "y", "z", "fcn", "bsize", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dx9", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dy9", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "dz9", "ox1", "ox2", "ox3", "ox4", "ox5", "ox6", "ox7", "ox8", "ox9", "oy1", "oy2", "oy3", "oy4", "oy5", "oy6", "oy7", "oy8", "oy9", "oz1", "oz2", "oz3", "oz4", "oz5", "oz6", "oz7", "oz8", "oz9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "o", "require_d_accessors", "__commonJSMin", "exports", "module", "binary0d", "x", "y", "z", "fcn", "require_d_accessors", "__commonJSMin", "exports", "module", "binary1d", "x", "y", "z", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dy0", "dz0", "S0", "ix", "iy", "iz", "i0", "require_d_accessors", "__commonJSMin", "exports", "module", "binary2d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dy0", "dy1", "dz0", "dz1", "sh", "S0", "S1", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "require_d_accessors", "__commonJSMin", "exports", "module", "binary3d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dy0", "dy1", "dy2", "dz0", "dz1", "dz2", "sh", "S0", "S1", "S2", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "require_d_accessors", "__commonJSMin", "exports", "module", "binary4d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dy0", "dy1", "dy2", "dy3", "dz0", "dz1", "dz2", "dz3", "sh", "S0", "S1", "S2", "S3", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "require_d_accessors", "__commonJSMin", "exports", "module", "binary5d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dy0", "dy1", "dy2", "dy3", "dy4", "dz0", "dz1", "dz2", "dz3", "dz4", "sh", "S0", "S1", "S2", "S3", "S4", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "require_d_accessors", "__commonJSMin", "exports", "module", "binary6d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "require_d_accessors", "__commonJSMin", "exports", "module", "binary7d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "require_d_accessors", "__commonJSMin", "exports", "module", "binary8d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "require_d_accessors", "__commonJSMin", "exports", "module", "binary9d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "require_d_accessors", "__commonJSMin", "exports", "module", "binary10d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "xget", "yget", "zset", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dx9", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dy9", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "dz9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "require_nd_accessors", "__commonJSMin", "exports", "module", "numel", "vind2bind", "MODE", "binarynd", "x", "y", "z", "fcn", "xbuf", "ybuf", "zbuf", "ordx", "ordy", "ordz", "xget", "yget", "zset", "len", "sh", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "i", "require_d", "__commonJSMin", "exports", "module", "binary0d", "x", "y", "z", "fcn", "require_d", "__commonJSMin", "exports", "module", "binary1d", "x", "y", "z", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dy0", "dz0", "S0", "ix", "iy", "iz", "i0", "require_d", "__commonJSMin", "exports", "module", "binary2d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dy0", "dy1", "dz0", "dz1", "sh", "S0", "S1", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "require_d", "__commonJSMin", "exports", "module", "binary3d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dy0", "dy1", "dy2", "dz0", "dz1", "dz2", "sh", "S0", "S1", "S2", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "require_d", "__commonJSMin", "exports", "module", "binary4d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dy0", "dy1", "dy2", "dy3", "dz0", "dz1", "dz2", "dz3", "sh", "S0", "S1", "S2", "S3", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "require_d", "__commonJSMin", "exports", "module", "binary5d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dy0", "dy1", "dy2", "dy3", "dy4", "dz0", "dz1", "dz2", "dz3", "dz4", "sh", "S0", "S1", "S2", "S3", "S4", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "require_d", "__commonJSMin", "exports", "module", "binary6d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "require_d", "__commonJSMin", "exports", "module", "binary7d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "require_d", "__commonJSMin", "exports", "module", "binary8d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "require_d", "__commonJSMin", "exports", "module", "binary9d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "require_d", "__commonJSMin", "exports", "module", "binary10d", "x", "y", "z", "isRowMajor", "fcn", "xbuf", "ybuf", "zbuf", "dx0", "dx1", "dx2", "dx3", "dx4", "dx5", "dx6", "dx7", "dx8", "dx9", "dy0", "dy1", "dy2", "dy3", "dy4", "dy5", "dy6", "dy7", "dy8", "dy9", "dz0", "dz1", "dz2", "dz3", "dz4", "dz5", "dz6", "dz7", "dz8", "dz9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sx", "sy", "sz", "ix", "iy", "iz", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "MODE", "binarynd", "x", "y", "z", "fcn", "xbuf", "ybuf", "zbuf", "ordx", "ordy", "ordz", "len", "sh", "sx", "sy", "sz", "ox", "oy", "oz", "ix", "iy", "iz", "require_main", "__commonJSMin", "exports", "module", "iterationOrder", "minmaxViewBufferIndex", "ndarray2object", "strides2order", "anyIsEntryIn", "format", "blockedaccessorbinary2d", "blockedaccessorbinary3d", "blockedaccessorbinary4d", "blockedaccessorbinary5d", "blockedaccessorbinary6d", "blockedaccessorbinary7d", "blockedaccessorbinary8d", "blockedaccessorbinary9d", "blockedaccessorbinary10d", "blockedbinary2d", "blockedbinary3d", "blockedbinary4d", "blockedbinary5d", "blockedbinary6d", "blockedbinary7d", "blockedbinary8d", "blockedbinary9d", "blockedbinary10d", "accessorbinary0d", "accessorbinary1d", "accessorbinary2d", "accessorbinary3d", "accessorbinary4d", "accessorbinary5d", "accessorbinary6d", "accessorbinary7d", "accessorbinary8d", "accessorbinary9d", "accessorbinary10d", "accessorbinarynd", "binary0d", "binary1d", "binary2d", "binary3d", "binary4d", "binary5d", "binary6d", "binary7d", "binary8d", "binary9d", "binary10d", "binarynd", "BINARY", "ACCESSOR_BINARY", "BLOCKED_BINARY", "BLOCKED_ACCESSOR_BINARY", "MAX_DIMS", "hasAccessors", "x", "y", "z", "binary", "arrays", "fcn", "ndims", "xmmv", "ymmv", "zmmv", "shx", "shy", "shz", "iox", "ioy", "ioz", "len", "ord", "sx", "sy", "sz", "ox", "oy", "oz", "ns", "d", "i", "main"]
}
